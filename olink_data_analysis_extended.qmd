---
title: "Olink cohort - TÃ¼bingen (extended)"
subtitle: "Report on Survival analysis"
author: "Louise Maise"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-title: " "
    number-sections: true
---

# Introduction

The Olink cohort comprises 60 glioma patients: 30 patients with glioblastoma and 30 patients with either Astrocytomas IDH mut grade 2-4 or Oligodendroglioma grade 2-3 according to WHO CNS 5 nomenclature.

Expression levels of about 80 different cytokines were analyzed in patient tissue samples. Here, these cytokines are further considered in terms of potential relevance as prognostic markers, especially in glioblastoma patients. Overall and progression-free survival were selected as endpoints for this retrospective analysis.

The following report will explain crucial steps of the performed survival analysis and provide insight into first preliminary results.


# Loading libraries

Several packages were used for data table generation and figure curation.

```{r, warning=FALSE, message=FALSE}
library(tidyverse) 
library(dplyr)
library(DT) # create interactive datatables
library(survival) # survival analysis
library(survminer) # survival analysis, optimal cutoff generation
library(gt) # formatting gt_objects
library(gtsummary) # uni- and mutivariate analysis, table generation
library(patchwork) # arranging plots
```


# Loading and cleaning data

The extended dataset has already been loaded and cleaned in the previous step of this pipeline. Functions for further data processing have been deposited in a separate .R script ("functions.R")

```{r}
# Source functions
source(file="R/functions.R")

# Read the clean dataset
clean_data_extended <- readRDS(file = "input/clean_data_extended.rds")
```

This dataframe was reduced to include only glioblastoma patients. Binary variables were generated using the median and optimal cutoff methods described in more detail in the previous report. Vinary variables were converted to factors for further analysis. Here is the data table including all of the variables used for analysis.

```{r}
glioblastoma_data_extended <- clean_data_extended %>%
  filter(hgg_comparison == "glioblastoma")

saveRDS(glioblastoma_data_extended, file = "input/glioblastoma_data_extended.rds")


# Use function stored in the /R folder under functions.R
source("R/functions.R")

# Define proteins of interest
variables <- c("CXCL11", "CD83", "IL8", "TNFRSF9", "TIE2", "MCP_3", "CD40_L", "IL_1_alpha", 
                    "CD244", "EGF", "ANG_1", "IL7", "PGF", "IL6", "ADGRG1", 
                    "MCP_1", "MCP_4", "TRAIL", "FGF2", "CXCL9", "CD8A",
                    "CAIX", "ADA", "CD4", "NOS3", "Gal_9",
                    "VEGFR2", "CD40", "IL18", "GZMH", "VEGFC", "LAP_TGF_beta_1",
                    "CXCL1", "TNFSF14", "IL33", "TWEAK", "PDGF subunit B", "PDCD1",
                    "FASLG", "CD28", "CCL19", "MCP_2", "CCL4", "Gal_1",
                    "PDL1", "CD27", "CXCL5", "HGF", "GZMA", "HO_1",
                    "CX3CL1", "CXCL10", "CD70", "TNFRSF12A", "CCL23",
                    "CD5", "CCL3", "MMP7", "ARG1", "DCN", "TNFRSF21",
                    "TNFRSF4", "MIC_A_B", "CCL17", "ANGPT2", "PTN", "CXCL12",
                    "LAMP3", "CASP_8", "ICOSLG", "MMP12", "CXCL13",
                    "PD_L2", "VEGFA", "IL4", "IL12RB1", "CCL20",
                    "KLRD1", "GZMB", "IL12", "CSF_1")


# Generate variables "binary_optimal" for proteins of interest using optimal cut-off
# Iterate over each variable
for (variable in variables) {
  
  # Calculate optimal cutpoint for the current variable
  optimal_cutpoint <- surv_cutpoint(
    data = glioblastoma_data_extended,
    variables = variable,
    time = "os_in_months",
    event = "censor_os"
  )
  
  # Extract the optimal cutoff value
  optimal_cutoff_value <- optimal_cutpoint$cutpoint
  
  # Create a binary variable indicating whether the current variable is above the optimal cutoff
  glioblastoma_data_extended[[paste0(variable, "_binary_optimal")]] <- glioblastoma_data_extended[[variable]] > optimal_cutoff_value$cutpoint
}


# Generate binary variables "binary_median" for proteins of interest using median cut-off
## Call the function and assign the returned dataframe to a new variable
glioblastoma_data_extended_binary <- generate_binary_var_median_cutoff_glioblastoma(
  glioblastoma_data_extended, variables)
datatable(glioblastoma_data_extended_binary)


# Save updated rds file
saveRDS(glioblastoma_data_extended_binary, file = "input/glioblastoma_data_extended_binary.rds")


# Convert median cutoff binary variable to factor
variable_names_factors_median <- c("CXCL11_binary_median", "CD83_binary_median", "IL8_binary_median", "TNFRSF9_binary_median", "TIE2_binary_median", "MCP_3_binary_median", "CD40_L_binary_median", "IL_1_alpha_binary_median", 
                            "CD244_binary_median", "EGF_binary_median", "ANG_1_binary_median", "IL7_binary_median", "PGF_binary_median", "IL6_binary_median", "ADGRG1_binary_median", 
                            "MCP_1_binary_median", "MCP_4_binary_median", "TRAIL_binary_median", "FGF2_binary_median", "CXCL9_binary_median", "CD8A_binary_median",
                            "CAIX_binary_median", "ADA_binary_median", "CD4_binary_median", "NOS3_binary_median", "Gal_9_binary_median",
                            "VEGFR2_binary_median", "CD40_binary_median", "IL18_binary_median", "GZMH_binary_median", "VEGFC_binary_median", "LAP_TGF_beta_1_binary_median",
                            "CXCL1_binary_median", "TNFSF14_binary_median", "IL33_binary_median", "TWEAK_binary_median", "PDGF subunit B_binary_median", "PDCD1_binary_median",
                            "FASLG_binary_median", "CD28_binary_median", "CCL19_binary_median", "MCP_2_binary_median", "CCL4_binary_median", "Gal_1_binary_median",
                            "PDL1_binary_median", "CD27_binary_median", "CXCL5_binary_median", "HGF_binary_median", "GZMA_binary_median", "HO_1_binary_median",
                            "CX3CL1_binary_median", "CXCL10_binary_median", "CD70_binary_median", "TNFRSF12A_binary_median", "CCL23_binary_median",
                            "CD5_binary_median", "CCL3_binary_median", "MMP7_binary_median", "ARG1_binary_median", "DCN_binary_median", "TNFRSF21_binary_median",
                            "TNFRSF4_binary_median", "MIC_A_B_binary_median", "CCL17_binary_median", "ANGPT2_binary_median", "PTN_binary_median", "CXCL12_binary_median",
                            "LAMP3_binary_median", "CASP_8_binary_median", "ICOSLG_binary_median", "MMP12_binary_median", "CXCL13_binary_median",
                            "PD_L2_binary_median", "VEGFA_binary_median", "IL4_binary_median", "IL12RB1_binary_median", "CCL20_binary_median",
                            "KLRD1_binary_median", "GZMB_binary_median", "IL12_binary_median", "CSF_1_binary_median")

source("R/functions.R")

glioblastoma_data_clean_extended <- convert_to_factor_median(glioblastoma_data_extended_binary, variable_names_factors_median)


# Convert optimal cutoff binary variable to factor
variable_names_factors_optimal <- c("CXCL11_binary_optimal", "CD83_binary_optimal", "IL8_binary_optimal", "TNFRSF9_binary_optimal", "TIE2_binary_optimal", "MCP_3_binary_optimal", "CD40_L_binary_optimal", "IL_1_alpha_binary_optimal", 
                                    "CD244_binary_optimal", "EGF_binary_optimal", "ANG_1_binary_optimal", "IL7_binary_optimal", "PGF_binary_optimal", "IL6_binary_optimal", "ADGRG1_binary_optimal", 
                                    "MCP_1_binary_optimal", "MCP_4_binary_optimal", "TRAIL_binary_optimal", "FGF2_binary_optimal", "CXCL9_binary_optimal", "CD8A_binary_optimal",
                                    "CAIX_binary_optimal", "ADA_binary_optimal", "CD4_binary_optimal", "NOS3_binary_optimal", "Gal_9_binary_optimal",
                                    "VEGFR2_binary_optimal", "CD40_binary_optimal", "IL18_binary_optimal", "GZMH_binary_optimal", "VEGFC_binary_optimal", "LAP_TGF_beta_1_binary_optimal",
                                    "CXCL1_binary_optimal", "TNFSF14_binary_optimal", "IL33_binary_optimal", "TWEAK_binary_optimal", "PDGF subunit B_binary_optimal", "PDCD1_binary_optimal",
                                    "FASLG_binary_optimal", "CD28_binary_optimal", "CCL19_binary_optimal", "MCP_2_binary_optimal", "CCL4_binary_optimal", "Gal_1_binary_optimal",
                                    "PDL1_binary_optimal", "CD27_binary_optimal", "CXCL5_binary_optimal", "HGF_binary_optimal", "GZMA_binary_optimal", "HO_1_binary_optimal",
                                    "CX3CL1_binary_optimal", "CXCL10_binary_optimal", "CD70_binary_optimal", "TNFRSF12A_binary_optimal", "CCL23_binary_optimal",
                                    "CD5_binary_optimal", "CCL3_binary_optimal", "MMP7_binary_optimal", "ARG1_binary_optimal", "DCN_binary_optimal", "TNFRSF21_binary_optimal",
                                    "TNFRSF4_binary_optimal", "MIC_A_B_binary_optimal", "CCL17_binary_optimal", "ANGPT2_binary_optimal", "PTN_binary_optimal", "CXCL12_binary_optimal",
                                    "LAMP3_binary_optimal", "CASP_8_binary_optimal", "ICOSLG_binary_optimal", "MMP12_binary_optimal", "CXCL13_binary_optimal",
                                    "PD_L2_binary_optimal", "VEGFA_binary_optimal", "IL4_binary_optimal", "IL12RB1_binary_optimal", "CCL20_binary_optimal",
                                    "KLRD1_binary_optimal", "GZMB_binary_optimal", "IL12_binary_optimal", "CSF_1_binary_optimal")

glioblastoma_data_clean_extended <- convert_to_factor_optimal(glioblastoma_data_extended_binary, variable_names_factors_optimal)

saveRDS(glioblastoma_data_clean_extended, "input/glioblastoma_data_clean_extended.rds")

```

# Survival analysis
## Median cutoff method

Kaplan Meier curves were generated and Log-rank tests were performed according to binary variables as defined by the *median* cutoff method. Let's look at Overall Survival first.

### Overall Survival

```{r, fig.width=9}
# Cut-off median of all 30 Glioblastoma patients only#####################
# List of variable names
variable_names_binary_extended <- c("CXCL11_binary_median", "CD83_binary_median", "IL8_binary_median", "TNFRSF9_binary_median", "TIE2_binary_median", "MCP_3_binary_median", #"CD40_L_binary_median",
                    "IL_1_alpha_binary_median", 
                    "CD244_binary_median", "EGF_binary_median", "ANG_1_binary_median", "IL7_binary_median", "PGF_binary_median", "IL6_binary_median", "ADGRG1_binary_median", 
                    "MCP_1_binary_median", "MCP_4_binary_median", "TRAIL_binary_median", "FGF2_binary_median", "CXCL9_binary_median", "CD8A_binary_median",
                    "CAIX_binary_median", "ADA_binary_median", "CD4_binary_median", "NOS3_binary_median", "Gal_9_binary_median",
                    "VEGFR2_binary_median", "CD40_binary_median", "IL18_binary_median", "GZMH_binary_median", "VEGFC_binary_median", "LAP_TGF_beta_1_binary_median",
                    "CXCL1_binary_median", "TNFSF14_binary_median", "IL33_binary_median", "TWEAK_binary_median", "PDGF subunit B_binary_median",
                    "FASLG_binary_median", "CCL19_binary_median", "MCP_2_binary_median", "CCL4_binary_median", "Gal_1_binary_median",
                    "PDL1_binary_median", "CD27_binary_median", "CXCL5_binary_median", "HGF_binary_median", "GZMA_binary_median", "HO_1_binary_median",
                    "CX3CL1_binary_median", "CXCL10_binary_median", "CD70_binary_median", "TNFRSF12A_binary_median", "CCL23_binary_median",
                    "CD5_binary_median", "CCL3_binary_median", "MMP7_binary_median", "ARG1_binary_median", "DCN_binary_median", "TNFRSF21_binary_median",
                    "TNFRSF4_binary_median", "MIC_A_B_binary_median", "CCL17_binary_median", "ANGPT2_binary_median", "PTN_binary_median",
                    "LAMP3_binary_median", "CASP_8_binary_median", "ICOSLG_binary_median", "MMP12_binary_median", "CXCL13_binary_median",
                    "VEGFA_binary_median", "IL12RB1_binary_median", "CCL20_binary_median",
                    "GZMB_binary_median", "IL12_binary_median", "CSF_1_binary_median")

## Overall Survival: Kaplan Meier curves and Log-rank tests for proteins of interest
### Create a list to store the plots
plot_list_os_extended <- list()

### Loop through each variable
for (variable in variable_names_binary_extended) {
  # Fit the survival model
  km_fit <- survfit(Surv(os_in_months, censor_os) ~ get(variable), 
                    data = glioblastoma_data_clean_extended)
  
  # Generate the plot
  ggsurv_plot <- ggsurvplot(
    km_fit,
    data = glioblastoma_data_clean_extended,
    risk.table = TRUE,
    tables.height = 0.3,
    pval = TRUE,
    pval.method = TRUE,
    pval.method.coord = c(0, 0.25),
    pval.coord = c(0, 0.15),
    conf.int = FALSE,
    palette = "jco",
    legend.title = "Legend",
    legend.labs = c(paste(variable, "Low"), paste(variable, "High"))
  ) +
    ggtitle(paste("OS stratified by", variable, "Cut-off Median glioblastoma pat."))
  
  # Modify theme
  ggsurv_plot$plot <- ggsurv_plot$plot +
    theme(
      legend.position = c(0.8, 0.8),
      legend.box.just = "right",
      legend.margin = margin(5, 5, 5, 5),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 12, face = "bold")
    )
  
  # Store the plot in the list
  plot_list_os_extended[[variable]] <- ggsurv_plot
}

### Print the plots
for (variable in variable_names_binary_extended) {
  print(plot_list_os_extended[[variable]])
}
```

```{r, fig.width = 15, fig.height = 100}
### Print the plots side by side
library(patchwork)

# Create a list to store ggplot objects
ggplot_list_os_extended <- lapply(variable_names_binary_extended, function(variable) {
  # Extract the ggsurvplot object
  ggsurv_plot <- plot_list_os_extended[[variable]]$plot
  
  # Remove the title from the risk table
  ggsurv_plot$table <- ggsurv_plot$table + theme(plot.title = element_text(hjust = 0))
  
  # Add the title to the main plot
  ggsurv_plot <- ggsurv_plot + ggtitle(paste("OS by", variable, " - median cutoff"))
  
  # Return the modified plot
  ggsurv_plot
})

# Arrange plots in two columns
plots_arranged_os_extended <- wrap_plots(ggplot_list_os_extended, ncol = 2)

# Print the arranged plots
plots_arranged_os_extended
```

### Progression-free survival

Now, let's look at Progression-free survival:

```{r}
## Progression-free Survival: Kaplan Meier curves and Log-rank tests for proteins of interest
### Create a list to store the plots
plot_list_pfs_extended <- list()

### Loop through each variable
for (variable in variable_names_binary_extended) {
  # Fit the survival model
  km_fit <- survfit(Surv(pfs_in_months, censor_pfs) ~ get(variable), 
                    data = glioblastoma_data_clean_extended)
  
  # Generate the plot
  ggsurv_plot <- ggsurvplot(
    km_fit,
    data = glioblastoma_data_clean_extended,
    risk.table = TRUE,
    tables.height = 0.3,
    pval = TRUE,
    pval.method = TRUE,
    pval.method.coord = c(0, 0.25),
    pval.coord = c(0, 0.15),
    conf.int = FALSE,
    palette = "jco",
    legend.title = "Legend",
    legend.labs = c(paste(variable, "Low"), paste(variable, "High"))
  ) +
    ggtitle(paste("PFS stratified by", variable, "Cut-off Median glioblastoma pat."))
  
  # Modify theme
  ggsurv_plot$plot <- ggsurv_plot$plot +
    theme(
      legend.position = c(0.8, 0.8),
      legend.box.just = "right",
      legend.margin = margin(5, 5, 5, 5),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 12, face = "bold")
    )
  
  # Store the plot in the list
  plot_list_pfs_extended[[variable]] <- ggsurv_plot
}

### Print the plots
for (variable in variable_names_binary_extended) {
  print(plot_list_pfs_extended[[variable]])
}
```

```{r, fig.width = 15, fig.height = 100}
### Print the plots side by side
library(patchwork)

# Create a list to store ggplot objects
ggplot_list_pfs_extended <- lapply(variable_names_binary_extended, function(variable) {
  # Extract the ggsurvplot object
  ggsurv_plot <- plot_list_pfs_extended[[variable]]$plot
  
  # Remove the title from the risk table
  ggsurv_plot$table <- ggsurv_plot$table + theme(plot.title = element_text(hjust = 0))
  
  # Add the title to the main plot
  ggsurv_plot <- ggsurv_plot + ggtitle(paste("PFS by", variable, " - median cutoff"))
  
  # Return the modified plot
  ggsurv_plot
})

# Arrange plots in two columns
plots_arranged_pfs_extended <- wrap_plots(ggplot_list_pfs_extended, ncol = 2)

# Print the arranged plots
plots_arranged_pfs_extended
```



## Optimal cutoff method

Next, Kaplan Meier curves and Log-rank tests were performed according to binary variables as defined by the *optimal* cutoff method. Let's look at Overall Survival first.

### Overall survival

```{r, fig.width=9}
# Cut-off median of all 30 Glioblastoma patients only#####################
# List of variable names
variable_names_binary_extended <- c("CXCL11_binary_optimal", "CD83_binary_optimal", "IL8_binary_optimal", "TNFRSF9_binary_optimal", "TIE2_binary_optimal", "MCP_3_binary_optimal", #"CD40_L_binary_optimal",
                    "IL_1_alpha_binary_optimal", 
                    "CD244_binary_optimal", "EGF_binary_optimal", "ANG_1_binary_optimal", "IL7_binary_optimal", "PGF_binary_optimal", "IL6_binary_optimal", "ADGRG1_binary_optimal", 
                    "MCP_1_binary_optimal", "MCP_4_binary_optimal", "TRAIL_binary_optimal", "FGF2_binary_optimal", "CXCL9_binary_optimal", "CD8A_binary_optimal",
                    "CAIX_binary_optimal", "ADA_binary_optimal", "CD4_binary_optimal", "NOS3_binary_optimal", "Gal_9_binary_optimal",
                    "VEGFR2_binary_optimal", "CD40_binary_optimal", "IL18_binary_optimal", "GZMH_binary_optimal", "VEGFC_binary_optimal", "LAP_TGF_beta_1_binary_optimal",
                    "CXCL1_binary_optimal", "TNFSF14_binary_optimal", "IL33_binary_optimal", "TWEAK_binary_optimal", "PDGF subunit B_binary_optimal",
                    "FASLG_binary_optimal", "CCL19_binary_optimal", "MCP_2_binary_optimal", "CCL4_binary_optimal", "Gal_1_binary_optimal",
                    "PDL1_binary_optimal", "CD27_binary_optimal", "CXCL5_binary_optimal", "HGF_binary_optimal", "GZMA_binary_optimal", "HO_1_binary_optimal",
                    "CX3CL1_binary_optimal", "CXCL10_binary_optimal", "CD70_binary_optimal", "TNFRSF12A_binary_optimal", "CCL23_binary_optimal",
                    "CD5_binary_optimal", "CCL3_binary_optimal", "MMP7_binary_optimal", "ARG1_binary_optimal", "DCN_binary_optimal", "TNFRSF21_binary_optimal",
                    "TNFRSF4_binary_optimal", "MIC_A_B_binary_optimal", "CCL17_binary_optimal", "ANGPT2_binary_optimal", "PTN_binary_optimal",
                    "LAMP3_binary_optimal", "CASP_8_binary_optimal", "ICOSLG_binary_optimal", "MMP12_binary_optimal", "CXCL13_binary_optimal",
                    "VEGFA_binary_optimal", "IL12RB1_binary_optimal", "CCL20_binary_optimal",
                    "GZMB_binary_optimal", "IL12_binary_optimal", "CSF_1_binary_optimal")

## Overall Survival: Kaplan Meier curves and Log-rank tests for proteins of interest
### Create a list to store the plots
plot_list_os_extended <- list()

### Loop through each variable
for (variable in variable_names_binary_extended) {
  # Fit the survival model
  km_fit <- survfit(Surv(os_in_months, censor_os) ~ get(variable), 
                    data = glioblastoma_data_clean_extended)
  
  # Generate the plot
  ggsurv_plot <- ggsurvplot(
    km_fit,
    data = glioblastoma_data_clean_extended,
    risk.table = TRUE,
    tables.height = 0.3,
    pval = TRUE,
    pval.method = TRUE,
    pval.method.coord = c(0, 0.25),
    pval.coord = c(0, 0.15),
    conf.int = FALSE,
    palette = "jco",
    legend.title = "Legend",
    legend.labs = c(paste(variable, "Low"), paste(variable, "High"))
  ) +
    ggtitle(paste("OS stratified by", variable, "Cut-off Median glioblastoma pat."))
  
  # Modify theme
  ggsurv_plot$plot <- ggsurv_plot$plot +
    theme(
      legend.position = c(0.8, 0.8),
      legend.box.just = "right",
      legend.margin = margin(5, 5, 5, 5),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 12, face = "bold")
    )
  
  # Store the plot in the list
  plot_list_os_extended[[variable]] <- ggsurv_plot
}

### Print the plots
for (variable in variable_names_binary_extended) {
  print(plot_list_os_extended[[variable]])
}
```

```{r, fig.width = 15, fig.height = 100}
### Print the plots side by side
library(patchwork)

# Create a list to store ggplot objects
ggplot_list_os_extended <- lapply(variable_names_binary_extended, function(variable) {
  # Extract the ggsurvplot object
  ggsurv_plot <- plot_list_os_extended[[variable]]$plot
  
  # Remove the title from the risk table
  ggsurv_plot$table <- ggsurv_plot$table + theme(plot.title = element_text(hjust = 0))
  
  # Add the title to the main plot
  ggsurv_plot <- ggsurv_plot + ggtitle(paste("OS by", variable, " - median cutoff"))
  
  # Return the modified plot
  ggsurv_plot
})

# Arrange plots in two columns
plots_arranged_os_extended <- wrap_plots(ggplot_list_os_extended, ncol = 2)

# Print the arranged plots
plots_arranged_os_extended
```

### Progression-free survival

Now, let's look at Progression-free survival:

```{r}
## Progression-free Survival: Kaplan Meier curves and Log-rank tests for proteins of interest
### Create a list to store the plots
plot_list_pfs_extended <- list()

### Loop through each variable
for (variable in variable_names_binary_extended) {
  # Fit the survival model
  km_fit <- survfit(Surv(pfs_in_months, censor_pfs) ~ get(variable), 
                    data = glioblastoma_data_clean_extended)
  
  # Generate the plot
  ggsurv_plot <- ggsurvplot(
    km_fit,
    data = glioblastoma_data_clean_extended,
    risk.table = TRUE,
    tables.height = 0.3,
    pval = TRUE,
    pval.method = TRUE,
    pval.method.coord = c(0, 0.25),
    pval.coord = c(0, 0.15),
    conf.int = FALSE,
    palette = "jco",
    legend.title = "Legend",
    legend.labs = c(paste(variable, "Low"), paste(variable, "High"))
  ) +
    ggtitle(paste("PFS stratified by", variable, "Cut-off Median glioblastoma pat."))
  
  # Modify theme
  ggsurv_plot$plot <- ggsurv_plot$plot +
    theme(
      legend.position = c(0.8, 0.8),
      legend.box.just = "right",
      legend.margin = margin(5, 5, 5, 5),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 12, face = "bold")
    )
  
  # Store the plot in the list
  plot_list_pfs_extended[[variable]] <- ggsurv_plot
}

### Print the plots
for (variable in variable_names_binary_extended) {
  print(plot_list_pfs_extended[[variable]])
}
```

```{r, fig.width = 15, fig.height = 100}
### Print the plots side by side
library(patchwork)

# Create a list to store ggplot objects
ggplot_list_pfs_extended <- lapply(variable_names_binary_extended, function(variable) {
  # Extract the ggsurvplot object
  ggsurv_plot <- plot_list_pfs_extended[[variable]]$plot
  
  # Remove the title from the risk table
  ggsurv_plot$table <- ggsurv_plot$table + theme(plot.title = element_text(hjust = 0))
  
  # Add the title to the main plot
  ggsurv_plot <- ggsurv_plot + ggtitle(paste("PFS by", variable, " - median cutoff"))
  
  # Return the modified plot
  ggsurv_plot
})

# Arrange plots in two columns
plots_arranged_pfs_extended <- wrap_plots(ggplot_list_pfs_extended, ncol = 2)

# Print the arranged plots
plots_arranged_pfs_extended
```